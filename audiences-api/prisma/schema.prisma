datasource db {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

model FacebookTarget {
  id                   String                   @id @unique @default(uuid()) @db.Uuid
  spec                 Json                     @db.JsonB
  segments             Json?                    @db.JsonB
  topics               Json?                    @db.JsonB
  userTags             Json?                    @map("user_tags") @db.JsonB
  createdAt            DateTime                 @default(now()) @map("created_at")
  updatedAt            DateTime?                @updatedAt @map("updated_at")
  searchVector         Unsupported("tsvector")? @map("search_vector")
  segmentsVector       Float[]                  @map("segments_vector") @db.Real
  combinedTopicsVector Float[]                  @map("combined_topics_vector") @db.Real
  segmentsRelatedWords Json?                    @map("segments_related_words") @db.JsonB
  UserTargetings       UserTargetings[]

  @@map("facebook_targetings")
}

model FacebookTargetInsights {
  ad_set_id                          String  @unique
  spend                              Float?
  impressions                        Float?
  social_spend                       Float?
  reach                              Float?
  clicks                             Float?
  unique_clicks                      Float?
  inline_link_clicks                 Float?
  inline_post_engagement             Float?
  unique_ctr                         Float?
  instant_experience_clicks_to_open  Float?
  instant_experience_clicks_to_start Float?
  cpm                                Float?
  cpc                                Float?
  cpp                                Float?
  ctr                                Float?
  quality_ranking                    String?
  frequency                          Float?
  cost_per_inline_link_click         Float?
  cost_per_inline_post_engagement    Float?
  cost_per_unique_click              Float?
  cost_per_unique_inline_link_click  Float?
  engagement_rate_ranking            String?
  inline_link_click_ctr              Float?

  @@map("facebook_targeting_insights")
}

model FacebookSegment {
  id                     String                   @id @unique
  name                   String?
  description            String?
  disambiguationCategory String?                  @map("disambiguation_category")
  category               String?
  topic                  String?
  audienceSizeLowerBound Int?                     @map("audience_size_lower_bound")
  audienceSizeUpperBound Int?                     @map("audience_size_upper_bound")
  path                   Json?                    @db.JsonB
  status                 String?
  relatedWords           Json?                    @map("related_words") @db.JsonB
  synonyms               Json?                    @map("synonyms") @db.JsonB
  datamuse               Json?                    @db.JsonB
  searchVector           Unsupported("tsvector")? @map("search_vector")

  @@map("facebook_segments")
}

enum SocialProvider {
  facebook
}

model AdAccount {
  id                     String          @id @unique
  name                   String?
  provider               SocialProvider?
  status                 String?         @default("active") @map("status")
  businessProfilePicture String?         @map("business_profile_picture")
  synchronized           Boolean?        @default(false)
  createdAt              DateTime        @default(now()) @map("created_at")
  updatedAt              DateTime?       @map("updated_at")
  importedAt             DateTime?       @map("imported_at")
  currency               String          @default("USD")
  users                  User[]          @relation("ad_account_to_user")
  minDailyBudget         Float           @default(0) @map("min_daily_budget") @db.DoublePrecision
  businessCity           String?         @map("business_city")
  businessName           String?         @map("business_name")
  businessCountryCode    String?         @map("business_country_code")
  businessZip            String?         @map("business_zip")
  businessId             String?         @map("business_id")
  campaignId             String?         @map("campaign_id")
  adsetId                String?         @map("adset_id")

  @@map("ad_accounts")
}

model UserTargetings {
  user        User           @relation(fields: [userId], references: [id])
  userId      String         @map("user_id") @db.Uuid
  targeting   FacebookTarget @relation(fields: [targetingId], references: [id])
  targetingId String         @map("targeting_id") @db.Uuid
  assignedAt  DateTime       @default(now()) @map("assigned_at")

  @@id([userId, targetingId])
  @@map("user_targetings")
}

model User {
  id                   String      @id @default(uuid()) @db.Uuid
  email                String      @unique
  phone                String?
  name                 String?
  firstName            String?     @map("first_name")
  lastName             String?     @map("last_name")
  password             String?
  stripeCustomerId     String?     @unique @map("stripe_customer_id")
  stripeSubscriptionId String?     @unique @map("stripe_subscription_id")
  emailVerified        Boolean     @default(false) @map("email_verified")
  profilePicture       String?     @map("profile_picture")
  isAdmin              Boolean     @default(false) @map("is_admin")
  createdAt            DateTime    @default(now()) @map("created_at")
  updatedAt            DateTime?   @updatedAt @map("updated_at")
  billing              Json?       @db.JsonB
  authTokens           AuthToken[]
  adAccounts           AdAccount[] @relation("ad_account_to_user")

  UserTargetings UserTargetings[]

  @@map("users")
}

enum TokenStatus {
  active
  expired
  revoked
}

model AuthToken {
  id               String         @id @unique @default(uuid()) @db.Uuid
  user             User           @relation(fields: [userId], references: [id])
  userId           String         @map("user_id") @db.Uuid
  accessToken      String         @map("access_token")
  status           TokenStatus?   @default(active)
  provider         SocialProvider
  providerClientId String         @unique @map("provider_client_id")
  expiresAt        DateTime?      @map("expires_at")
  createdAt        DateTime       @default(now()) @map("created_at")

  @@map("auth_tokens")
}

model AuditLog {
  id          BigInt   @id @unique @default(autoincrement())
  environment String   @default("local")
  context     String
  payload     Json?    @db.JsonB
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("audit_logs")
}
